const { EVENTS } = require('@bot-whatsapp/bot')

const { createBot,
    createProvider,
    createFlow,
    addKeyword 
} = require('@bot-whatsapp/bot')

const QRPortalWeb = require('@bot-whatsapp/portal')
const WebWhatsappProvider = require('@bot-whatsapp/provider/web-whatsapp')
const MockAdapter = require('@bot-whatsapp/database/mock')

/**
 * Aqui declaramos los flujos hijos, los flujos se declaran de atras para adelante, es decir que si tienes un flujo de este tipo:
 *
 *          Menu Principal
 *           - SubMenu 1
 *             - Submenu 1.1
 *           - Submenu 2
 *             - Submenu 2.1
 *
 * Primero declaras los submenus 1.1 y 2.1, luego el 1 y 2 y al final el principal.
 */

let ciudadOrigen;
let ciudadDestino;
let fecha;
let nombre;
let numeroW;
const resumen =[];


// !Array de ciudades de Colombia
const ciudadesColombia = [
    "bogota", "medellin", "cali", "barranquilla", "cartagena", 
    "bucaramanga", "pereira", "santa marta", "manizales", "ibague", 
    "cucuta", "villavicencio", "pasto", "neiva", "armenia", 
    "popayan", "sincelejo", "valledupar", "monteria", "tunja", 
    "riohacha", "florencia", "quibdo", "yopal", "mocoa", "san andres"
];

/**
 * !Flujo Resumen del servicio
 */
const flowResumen = addKeyword([''])
    .addAnswer(['Este es el resumen de su servicio: ',ciudadOrigen,ciudadDestino, fecha]
    )
    console.log(ciudadOrigen + ciudadDestino + fecha)

/**
 * !Flujo Fecha de servicio
 */
const flowFecha = addKeyword([''])
    .addAnswer(['Ahora escribe la fecha tentativa del servicio', 'Utiliza el formato dd-MM', 'Ejemplo: 01-12'],
    {capture: true},
    (ctx, {fallBack,gotoFlow}) => {
        
        fecha = ctx.body;

        // Obtener día y mes del usuario
        const partesFecha = fecha.split('-');
        const diaUsuario = parseInt(partesFecha[1], 10);
        const mesUsuario = parseInt(partesFecha[0], 10);
        
        console.log('el dia escrito por el usuario es: ' + diaUsuario)
        console.log('el mes escrito por el usuario es: ' + mesUsuario)

         // Expresión regular para validar el formato dd-MM
        const formatoFecha = /^\d{2}-\d{2}$/;
        const fechaActual = new Date();
        const diaActual = parseInt(fechaActual.getDate(), 10); // Obtener el día del mes (1-31)
        const mesActual = parseInt(fechaActual.getMonth() + 1); // Obtener el mes (0-11), sumamos 1 para que sea (1-12)
        const anio = fechaActual.getFullYear(); // Obtener el año

        console.log('el dia actual es: ' + diaActual)
        console.log('el mes actual es: ' + mesActual)

        // Almacenar el año en una variable separada
        const añoActual = anio;

         // Validar si la fecha cumple con el formato requerido
        if (!formatoFecha.test(fecha)) {
            console.log('El formato de la fecha no es válido. Por favor, utiliza el formato dd-MM.');
            return fallBack(); // Salir de la función si el formato no es válido
        }else{
            // Validar si el mes del usuario es menor o igual al mes actual
            if (mesUsuario >= mesActual) {
                console.log('El mes ingresado es mayor o igual al mes actual.');
                if(diaUsuario >= diaActual){
                    console.log('Día ok')
                    resumen.push(fecha);
                    return gotoFlow(flowResumen);
                }else{
                    console.log('El día ingresado es anterior al actual.');
                    return fallBack();
                }
            }else{
                console.log('El mes ingresado es menor al actual.');
                return fallBack();
            }              
            }
            console.log('La fecha ingresada es: ' + fecha);
    })

/**
 * !Flujo Ciudad de Destino
 */
const flowDestino = addKeyword([''])
.addAnswer(['Pof favor escribe la ciudad de *destino*'],
{capture: true}, (ctx, fallBack, gotoFlow) => {
    let ciudad = ctx.body.toLowerCase();
    ciudad = ciudad.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    console.log(ciudad);

    // Validar si la ciudad de destino es igual a la ciudad de origen
    if (ciudad === ciudadOrigen) {
        console.log('La ciudad de destino no puede ser la misma que la ciudad de origen. Por favor, ingrese otra ciudad.');
        return; // Salir de la función si la ciudad de destino es igual a la ciudad de origen
    }
    
    // Función para calcular la distancia de Levenshtein entre dos palabras
    function levenshteinDistance(a, b) {
        if (a.length === 0) return b.length; 
        if (b.length === 0) return a.length; 

        var matrix = [];

        // Inicializar la primera fila y columna de la matriz
        for (var i = 0; i <= b.length; i++) {
            matrix[i] = [i];
        }

        for (var j = 0; j <= a.length; j++) {
            matrix[0][j] = j;
        }

        // Llenar el resto de la matriz
        for (var i = 1; i <= b.length; i++) {
            for (var j = 1; j <= a.length; j++) {
                if (b.charAt(i - 1) == a.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1, // Reemplazar
                        matrix[i][j - 1] + 1,     // Insertar
                        matrix[i - 1][j] + 1      // Eliminar
                    );
                }
            }
        }

        return matrix[b.length][a.length];
    }

    // Función para encontrar la ciudad más similar en el arreglo de ciudades de Colombia
    function encontrarCiudad(palabra) {
        let distanciaMinima = Infinity;
        let ciudadMasSimilar = null;

        ciudadesColombia.forEach(ciudad => {
            const distancia = levenshteinDistance(palabra.toLowerCase(), ciudad.toLowerCase());
            if (distancia < distanciaMinima) {
                distanciaMinima = distancia;
                ciudadMasSimilar = ciudad;
            }
        });

        return ciudadMasSimilar;
    }

    // Encontrar la ciudad más similar en el arreglo de ciudades de Colombia = encontrarCiudad(ciudad);
    ciudadDestino = encontrarCiudad(ciudad);
    // Imprimir resultado
    if (ciudadDestino) {
        console.log('La ciudad ingresada parece ser: ' + ciudadDestino);
        return gotoFlow(flowFecha);
    } else {
        return fallBack();
        console.log('No se encontró la ciudad ' + ciudad +' en las ciudades de Colombia.');
    }
})

/**
 * !Flujo Ciudad de Origen
 */
const flowOrigen = addKeyword([''])
    .addAnswer(['Por favor escribe la ciudad de *origen*'],
    {capture: true}, (ctx, {fallBack, gotoFlow}) => {
        let ciudad = ctx.body.toLowerCase();
        ciudad = ciudad.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        console.log(ciudad);
        
        //!Función para calcular la distancia de Levenshtein entre dos palabras
        function levenshteinDistance(a, b) {
            if (a.length === 0) return b.length; 
            if (b.length === 0) return a.length; 

            var matrix = [];

            //!Inicializar la primera fila y columna de la matriz
            for (var i = 0; i <= b.length; i++) {
                matrix[i] = [i];
            }

            for (var j = 0; j <= a.length; j++) {
                matrix[0][j] = j;
            }

            // Llenar el resto de la matriz
            for (var i = 1; i <= b.length; i++) {
                for (var j = 1; j <= a.length; j++) {
                    if (b.charAt(i - 1) == a.charAt(j - 1)) {
                        matrix[i][j] = matrix[i - 1][j - 1];
                    } else {
                        matrix[i][j] = Math.min(
                            matrix[i - 1][j - 1] + 1, // Reemplazar
                            matrix[i][j - 1] + 1,     // Insertar
                            matrix[i - 1][j] + 1      // Eliminar
                        );
                    }
                }
            }

            return matrix[b.length][a.length];
        }

        //!Función para encontrar la ciudad más similar en el arreglo de ciudades de Colombia
        function encontrarCiudad(palabra) {
            let distanciaMinima = Infinity;
            let ciudadMasSimilar = null;

            ciudadesColombia.forEach(ciudad => {
                const distancia = levenshteinDistance(palabra.toLowerCase(), ciudad.toLowerCase());
                if (distancia < distanciaMinima) {
                    distanciaMinima = distancia;
                    ciudadMasSimilar = ciudad;
                }
            });

            return ciudadMasSimilar;
        }

        //!Encontrar la ciudad más similar en el arreglo de ciudades de Colombia
        ciudadOrigen = encontrarCiudad(ciudad);

        // Imprimir resultado
        if (ciudadOrigen) {
            console.log('La ciudad ingresada parece ser: ' + ciudadOrigen);
            resumen.push(ciudadOrigen);
            return gotoFlow(flowDestino)
        } else {
            return fallBack();
            console.log('No se encontró la ciudad ' + ciudad +' en las ciudades de Colombia.');
        }
    })

/**
 * !Flujo principal
 */
const flowPrincipal = addKeyword(EVENTS.WELCOME)
    .addAnswer('🙌 Hola bienvenido, soy el asistente virtual *ChatBot*',{delay:1500})
    .addAnswer('¿Cómo te llamas?',{delay:1000}, {capture: true},
    (ctx, {gotoFlow}) =>{
        nombre = ctx.body;
        numeroW = ctx.from;
        console.log('Msj entrante: ' ,nombre)
        console.log('del numero: ' ,numeroW)
        return gotoFlow(flowOrigen);

    })

const main = async () => {
    const adapterDB = new MockAdapter()
    const adapterFlow = createFlow([flowPrincipal])
    const adapterProvider = createProvider(WebWhatsappProvider)
    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })
    QRPortalWeb()
}

main()